name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  BUCKET_NAME: nabeel-cicd-mi-model2
  STATE_BUCKET_NAME: ml-state-bucket
  AWS_BUCKET_KEY_NAME: infra.tfstate
  ECR_REPOSITORY: nabeel-cicd-mi-model2
  SAGEMAKER_MODEL: nabeel-cicd-mi-model2

jobs:

  deploy_infra:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra
    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup (install) Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${STATE_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        if: github.event_name == 'pull_request'
        continue-on-error: true

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false



  build:
    runs-on: ubuntu-latest
    needs: deploy_infra
    defaults:
      run:
        shell: bash
        working-directory: ./app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        PYTHONPATH=. pytest

    - name: Train model
      run: |
        python train.py

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: List files before packaging
      run: ls -l

    - name: Package model and compress
      run: |
        tar -czvf model.joblib.tar.gz model.joblib
        
    - name: List files after packaging
      run: ls -l

    - name: Deploy model
      run: |
        echo "Deploying model..."
        if [ -f "model.joblib.tar.gz" ]
        then 
          echo "Model packaged successfully"
        else 
          echo "Model package failed"
          exit 1 
        fi

    - name: Upload model artifact
      uses: actions/upload-artifact@v2
      with:
        name: model.joblib.tar.gz
    
  deploy_to_s3:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download model artifact
      uses: actions/download-artifact@v2
      with:
        name: model.joblib.tar.gz
    
    - name: List files after calling artifact
      run: ls -l


    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli
    
    - name: Deploy model to S3
      run: |
        aws s3 cp ./model.joblib.tar.gz s3://${{ env.BUCKET_NAME }}/model/model.tar.gz

  # deploy_to_sagemaker:
  #   runs-on: ubuntu-latest
  #   needs: deploy_to_s3

  #   steps:
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}
        
  #   - name: Login to Amazon ECR
  #     id: login-ecr
  #     uses: aws-actions/amazon-ecr-login@v2


  #   - name: Deploy to SageMaker
  #     run: |
  #       aws sagemaker create-model \
  #         --model-name ${{ env.SAGEMAKER_MODEL }} \
  #         --primary-container Image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest,ModelDataUrl=s3://${{ env.BUCKET_NAME }}/model/model.joblib.tar.gz \
  #         --execution-role-arn arn:aws:iam::058264202072:role/SageMakerRole

  #   - name: Create Endpoint Configuration
  #     run: |
  #       aws sagemaker create-endpoint-config \
  #         --endpoint-config-name nabeel-sagemaker-endpoint-config \
  #         --production-variants VariantName=AllTraffic,ModelName=${{ env.SAGEMAKER_MODEL }},InitialInstanceCount=1,InstanceType=ml.m5.large

  #     # Failed to extract model data archive from URL "s3://nabeel-cicd-mi-model2/model/model.joblib". Please ensure that the object located at the URL is a valid tar.gz archive.
  #   - name: Deploy Endpoint
  #     run: |
  #       aws sagemaker create-endpoint \
  #         --endpoint-name nabeel-sagemaker-endpoint \
  #         --endpoint-config-name nabeel-sagemaker-endpoint-config
