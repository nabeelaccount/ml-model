name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  BUCKET_NAME: nabeel-cicd-mi-model2
  ECR_REPOSITORY: nabeel-cicd-mi-model2

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
  
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        PYTHONPATH=. pytest

    - name: Train model
      run: |
        python train.py

    - name: Deploy model
      run: |
        echo "Deploying model..."
        if [ -f "model.joblib" ]; then echo "Model deployed successfully"; else echo "Model deployment failed"; exit 1; fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, Tag, and Push the Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Upload model artifact
      uses: actions/upload-artifact@v2
      with:
        name: model.joblib
        path: model.joblib
    
  deploy_to_s3:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Download model artifact
      uses: actions/download-artifact@v2
      with:
        name: model.joblib
        path: ./

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install AWS CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y awscli
    
    - name: Deploy model to S3
      run: |
        aws s3 cp model.joblib s3://${{ env.BUCKET_NAME }}/model/model.joblib

  deploy_to_sagemaker:
    runs-on: ubuntu-latest
    needs: deploy_to_s3

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to SageMaker
      run: |
        aws sagemaker create-model \
          --model-name nabeel-sagemaker-model \
          --primary-container Image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest,ModelDataUrl=s3://${{ env.BUCKET_NAME }}/model/model.joblib \
          --execution-role-arn arn:aws:iam::058264202072:role/SageMakerRole

    - name: Create Endpoint Configuration
      run: |
        aws sagemaker create-endpoint-config \
          --endpoint-config-name nabeel-sagemaker-endpoint-config \
          --production-variants VariantName=AllTraffic,ModelName=nabeel-sagemaker-model,InitialInstanceCount=1,InstanceType=ml.m5.large

    - name: Deploy Endpoint
      run: |
        aws sagemaker create-endpoint \
          --endpoint-name nabeel-sagemaker-endpoint \
          --endpoint-config-name nabeel-sagemaker-endpoint-config
